/*
 * Generated by JavaFX Production Suite NetBeans plugin.
 * pizzaUI.fx
 *
 * Created on Wed Apr 06 18:26:17 CEST 2011
 */
package GUI;

import java.lang.*;
import javafx.scene.Node;
import javafx.fxd.FXDNode;
import javafx.animation.Timeline;
import javafx.animation.Interpolator;
import javafx.animation.KeyFrame;

public class pizzaUI extends FXDNode {

    override public var url = "{__DIR__}pizza.fxz";
    public var gut: Duration = 5s;
    public var schlecht: Duration = 5s;
    var wert: Integer = 100;
    var Knochen: Node;
    var layer1: Node;
    var l1Opacity = bind layer1.opacity with inverse;
    var kOpacity = bind Knochen.opacity with inverse;

    override protected function contentLoaded(): Void {
        Knochen = getNode("Knochen");
        layer1 = getNode("layer1");
        Knochen.opacity = 0.0;
    }

    /**
     * Check if some element with given id exists and write
     * a warning if the element could not be found.
     * The whole method can be removed if such warning is not required.
     */
    protected override function getObject(id: String): Object {
        var obj = super.getObject(id);
        if (obj == null) {
            System.err.println("WARNING: Element with id {id} not found in {url}");
        }
        return obj;
    }

    var timeline = Timeline {
                repeatCount: 1
                keyFrames: [
                    KeyFrame {
                        // initial value is 0
                        time: 0s
                        action: function() {
                            println("0s");
                        }
                        values: [
                            l1Opacity => 1.0 tween Interpolator.LINEAR,
                            kOpacity => 0.0 tween Interpolator.LINEAR
                        ]
                    },
                    KeyFrame {
                        time: gut
                        action: function() {
                        }
                        values: [
                            l1Opacity => 0.0 tween Interpolator.LINEAR,
                            kOpacity => 0.0 tween Interpolator.LINEAR,
                        ]
                    },
                    KeyFrame {
                        time: gut + schlecht
                        action: function() {
                        }
                        values: [
                            l1Opacity => 0.0 tween Interpolator.LINEAR,
                            kOpacity => 1.0 tween Interpolator.LINEAR,
                        ]
                    }
                ]
            };

    public function getAktuellenWert(): Number {
        return wert * (layer1.opacity - Knochen.opacity);

    }

    public function starteVerwessung(): Void {
        timeline.playFromStart();
    }

}

